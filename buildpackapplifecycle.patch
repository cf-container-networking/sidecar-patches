diff --git a/envoy-launcher/main.go b/envoy-launcher/main.go
new file mode 100644
index 0000000..b81d591
--- /dev/null
+++ b/envoy-launcher/main.go
@@ -0,0 +1,142 @@
+package main
+
+import (
+	"fmt"
+	"io/ioutil"
+	"log"
+	"os"
+	"syscall"
+)
+
+const configTemplate = `{
+    "listeners": [{
+        "address": "tcp://0.0.0.0:%s",
+        "filters": [{
+            "type": "read",
+            "name": "tcp_proxy",
+            "config": {
+                "stat_prefix": "ingress_tcp",
+                "route_config": {
+                    "routes": [{
+                            "cluster": "service_local"
+                    }]
+                }
+            }
+        }],
+        "ssl_context": {
+          "cert_chain_file": "%s",
+          "private_key_file": "%s"
+        }
+    },
+		{
+			"address": "tcp://0.0.0.0:9000",
+			"filters": [{
+					"type": "read",
+					"name": "tcp_proxy",
+					"config": {
+							"stat_prefix": "ingress_tcp",
+							"route_config": {
+									"routes": [{
+													"cluster": "service_app2"
+									}]
+							}
+					}
+			}]
+		}],
+    "admin": {
+        "access_log_path": "/tmp/admin_access.log",
+        "address": "tcp://127.0.0.1:9901"
+    },
+    "cluster_manager": {
+        "clusters": [{
+            "name": "service_local",
+            "connect_timeout_ms": 250,
+            "type": "static",
+            "lb_type": "round_robin",
+            "hosts": [{
+                "url": "tcp://127.0.0.1:%s"
+            }]
+        },
+				{
+            "name": "service_app2",
+            "connect_timeout_ms": 2500,
+            "type": "sds",
+            "lb_type": "round_robin",
+            "service_name": "b3bb5431-a0f0-422d-a530-cbe36fc57705",
+            "ssl_context": {
+              "cert_chain_file": "%s",
+              "private_key_file": "%s",
+              "ca_cert_file": "%s"
+            }
+				}],
+        "sds": {
+          "cluster": {
+            "name": "sds",
+            "connect_timeout_ms": 2500,
+            "type": "static",
+            "lb_type": "round_robin",
+            "hosts": [{
+							"url": "%s"
+            }]
+          },
+          "refresh_delay_ms": 1000
+        }
+    }
+}`
+
+const diegoCACert = `-----BEGIN CERTIFICATE-----
+MIIDPTCCAiWgAwIBAgIQWBtSaWs2jz6tgdXLJYFvXzANBgkqhkiG9w0BAQsFADBI
+MQwwCgYDVQQGEwNVU0ExFjAUBgNVBAoTDUNsb3VkIEZvdW5kcnkxIDAeBgNVBAMT
+F2RpZWdvSW5zdGFuY2VJZGVudGl0eUNBMB4XDTE3MDYyNzAwMDkyMFoXDTE4MDYy
+NzAwMDkyMFowSDEMMAoGA1UEBhMDVVNBMRYwFAYDVQQKEw1DbG91ZCBGb3VuZHJ5
+MSAwHgYDVQQDExdkaWVnb0luc3RhbmNlSWRlbnRpdHlDQTCCASIwDQYJKoZIhvcN
+AQEBBQADggEPADCCAQoCggEBAONrKdnO8PBqLgVLwhaCnIoNuUPSXqNaJvPARUyd
+OMqaMVxKs11eOUVfnW00kwbw8jzc06rB4aTI4BtPkB696QDqxppEAq0KTFwLzsBT
+eueQX42fKykFFsyorfi4c48pRk0A91h54b19DPxhuXd09/1JGze4KgJLIZnLNzIH
+fqbY76pRrsUSVQHPwJHc+XdTHd3YGA2dfb35mt8QMkhvw74su2Cx6NTes6b6Bysj
+k2PEDwn6sfWkvcz8WcoJkXDq/cAl9Dd7TNW2IM6qu5Xaz10QgslRz2p5IVkxjMot
+AA4x0shP3TufHUct2jBAjPzs3lNiZ4RWXuWtXvSFB3xGZBcCAwEAAaMjMCEwDgYD
+VR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEB
+AErCXCTS/q8zDIfFjTel+4b0kE1esyhVGCLvQqJRm/s//UySNxtdEP7lrF6fyRsA
+TYVKD/f0DXw74lh+ndRiBISR7qbDutjZJQoPc4Vrj+ZfpJYqxQHkkpaZZylNNbhE
+qEfqzKGyJRLdAAyFhjfqr7kcL4WMgDFD2wJ1HXUWzvGaUzuaAOcV/1k9cwFA4pWJ
+pJLbixVYJqdF17o5Tla8LO6FfEm1j2QDGxbtwDIhJVy6XfXd1g71iSYG8qNfE/rY
+oUYk2hQS4tHb3XQyvKX/VqGMjPkzGzujRTN3nBsl686Jf95uYDhmrVcY5r8dNJ1i
+Ms6wJ3GTaXx1sh9LWQ9B6TI=
+-----END CERTIFICATE-----`
+
+const caCertPath = "/home/vcap/tmp/ca.crt"
+
+const configFilePath = "/home/vcap/tmp/envoy-config.json"
+
+func main() {
+	certPath := os.Getenv("CF_INSTANCE_CERT")
+	keyPath := os.Getenv("CF_INSTANCE_KEY")
+	appPort := os.Getenv("PORT")
+	sdsURL := os.Getenv("SDS_URL")
+
+	tlsListenPort := os.Getenv("TLS_PORT")
+	if tlsListenPort == "" {
+		tlsListenPort = "10000"
+	}
+
+	err := ioutil.WriteFile(caCertPath, []byte(diegoCACert), os.ModePerm)
+	if err != nil {
+		log.Fatalf("writing ca file: %s", err)
+	}
+
+	fullConfig := fmt.Sprintf(configTemplate, tlsListenPort, certPath, keyPath, appPort, certPath, keyPath, caCertPath, sdsURL)
+	err = ioutil.WriteFile(configFilePath, []byte(fullConfig), os.ModePerm)
+	if err != nil {
+		log.Fatalf("writing config file: %s", err)
+	}
+
+	err = syscall.Exec("/tmp/lifecycle/envoy", []string{
+		"envoy",
+		"-c",
+		configFilePath,
+	}, os.Environ())
+	if err != nil {
+		log.Fatalf("exec: %s", err)
+	}
+}
